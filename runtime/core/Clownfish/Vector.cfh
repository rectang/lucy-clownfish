/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

parcel Clownfish;

/** Variable-sized array.
 */
public final class Clownfish::Vector nickname Vec inherits Clownfish::Obj {

    Obj      **elems;
    size_t     size;
    size_t     cap;

    /** Create a new Vector.
     *
     * @param capacity Initial number of elements that the object will be able
     * to hold before reallocation.
     */
    public inert incremented Vector*
    new(size_t capacity = 0);

    /** Initialize a Vector.
     *
     * @param capacity Initial number of elements that the object will be able
     * to hold before reallocation.
     */
    public inert Vector*
    init(Vector *self, size_t capacity = 0);

    void*
    To_Host(Vector *self);

    /** Push an item onto the end of a Vector.
     *
     * @param element the item to be pushed
     */
    public void
    Push(Vector *self, decremented Obj *element = NULL);

    /** Push all the elements of another Vector onto the end of this one.
     *
     * @param other the elements to be pushed
     */
    public void
    Push_All(Vector *self, Vector *other);

    /** Pop an item off of the end of a Vector.
     *
     * @return the element or [](@null) if the Vector is empty.
     */
    public incremented nullable Obj*
    Pop(Vector *self);

    /** Insert an element at `tick`, moving the following elements over.
     *
     * @param tick the index at which to insert
     * @param element the item to be inserted
     */
    public void
    Insert(Vector *self, size_t tick, decremented Obj *element = NULL);

    /** Inserts elements from `other` vector at `tick` moving the following
     * elements.
     *
     * @param tick the index starting at which elements will be inserted
     * @param element the elements to be inserted
     */
    public void
    Insert_All(Vector *self, size_t tick, Vector *other);

    /** Ensure that the Vector has room for at least `capacity` elements.
     */
    void
    Grow(Vector *self, size_t capacity);

    /** Fetch the element at `tick`.
     *
     * @param tick the index of the element to be retrieved
     * @return the element or [](@null) if `tick` is out of bounds.
     */
    public nullable Obj*
    Fetch(Vector *self, size_t tick);

    /** Store an element at index `tick`, possibly displacing an
     * existing element.
     * @param tick the index at which to store the element
     * @param elem the item to store
     */
    public void
    Store(Vector *self, size_t tick, decremented Obj *elem = NULL);

    /** Replace an element in the Vector with [](@null) and return it.
     *
     * @param tick the index of the element to delete
     * @return the element stored at `tick` or [](@null) if `tick` is out of
     * bounds.
     */
    public incremented nullable Obj*
    Delete(Vector *self, size_t tick);

    /** Remove `length` elements from the Vector, starting at `offset`.
     * Move elements over to fill in the gap.
     * @param offset the index of the first element to be excised
     * @param length the number of elements to excise
     */
    public void
    Excise(Vector *self, size_t offset, size_t length);

    /** Clone the Vector but merely increment the refcounts of its elements
     * rather than clone them.
     * @return a new Vector
     */
    public incremented Vector*
    Clone(Vector *self);

    /** Sort the Vector.  Sort order is guaranteed to be _stable_: the
     * relative order of elements which compare as equal will not change.
     */
    public void
    Sort(Vector *self);

    /** Set the size for the Vector.  If the new size is larger than the
     * current size, grow the object to accommodate [](@null) elements; if
     * smaller than the current size, decrement and discard truncated elements.
     */
    public void
    Resize(Vector *self, size_t size);

    /** Empty the Vector.
     */
    public void
    Clear(Vector *self);

    /** Get the number of elements the Vector is defined to hold, which is one
     * more than the highest valid tick.
     *
     * @return the size of the Vector
     */
    public size_t
    Get_Size(Vector *self);

    /** Return the capacity of the Vector.  This is the maximum number of
     * elements the Vector can hold without reallocation.
     *
     * @return capacity measured in potential total elements
     */
    size_t
    Get_Capacity(Vector *self);

    /** Return a new Vector consisting of elements from a contiguous slice.  If
     * the specified range is out of bounds, return a Vector with fewer
     * elements -- potentially none.
     *
     * @param offset The index of the element to start at.
     * @param length The maximum number of elements to slice.
     * @return a new Vector
     */
    public incremented Vector*
    Slice(Vector *self, size_t offset, size_t length);

    /** Equality test.
     *
     * @param other the object to test against for equality
     * @return true if `other` is a Vector with the same values as `self`.
     * Values are compared using their respective `Equals` methods.
     */
    public bool
    Equals(Vector *self, Obj *other);

    public void
    Destroy(Vector *self);
}


