# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require 'rake/clean'

def rbconfig
  RbConfig::CONFIG
end

def exe_path(*args)
  File.join(args).ext(RbConfig::CONFIG["EXEEXT"])
end

def cc_command
  rbconfig["CC"]
end

def all_ccflags
  ccflags = '-DCFCRUBY '

  if defined?(rbconfig["ARCH_FLAG"])
    ccflags += rbconfig['ARCH_FLAG'] + ' '
  end

  if defined?(rbconfig["CFLAGS"])
    ccflags += rbconfig['CFLAGS'] + ' '
  end

  if ENV.has_key?('CFLAGS')
    ccflags += ENV['CFLAGS']
  end

  if ENV.has_key?('LUCY_VALGRIND')
    ccflags += "-fno-inline-functions "
  end

  # Compile as C++ under MSVC.  Turn off stupid warnings, too.
  if cc_command =~ /^cl\b/
    ccflags += '/TP -D_CRT_SECURE_NO_WARNINGS '
  end

  # Blindly include GCC-specific flags even though we don't know that the
  # compiler is GCC.
  if ccflags !~ /-std=/
    ccflags += "-std=gnu99 "
  end
  if ccflags !~ /-D_GNU_SOURCE/
    ccflags += "-D_GNU_SOURCE "
  end

  return ccflags
end

BASE_PATH            = '..'
COMMON_SOURCE_DIR    = File.join(BASE_PATH, "common")
CHARMONIZER_C        = File.join(COMMON_SOURCE_DIR, 'charmonizer.c')
CHARMONIZER_EXE_PATH = File.absolute_path(exe_path('charmonizer'))
CHARMONIZER_ORIG_DIR = File.absolute_path( File.join( BASE_PATH, '..', '..', 'charmonizer' ) )
CHARMONY_H_PATH      = 'charmony.h'
CHARMONY_RB_PATH     = 'Charmony.rb'
CFC_RUBY_DIR         = File.absolute_path('.')
CFC_INCLUDE_DIR      = File.join(CFC_RUBY_DIR,'..','include')
RAKEFILE_PATH        = File.join(CFC_RUBY_DIR, "Rakefile")
RUBY_EXT_CFC         = File.join('.', 'ext', 'Clownfish')

desc "Build and run charmonizer, creating charmony.h and charmony.rb"
task :configure do
  # Compile charmonizer executable.
  if !uptodate? CHARMONIZER_EXE_PATH, [CHARMONIZER_C]
    outflag = cc_command.match(/cl\b/) ? "/Fe" : "-o "
    command = "#{cc_command} #{outflag}#{CHARMONIZER_EXE_PATH} #{CHARMONIZER_C}"
    puts command
    if !system(command)
      raise "Failed to compile #{CHARMONIZER_EXE_PATH}"
    end
  end

  # Return if charmonizer output is current.
  if uptodate? CHARMONY_RB_PATH, [CHARMONIZER_EXE_PATH]
    next
  end
  puts "Running #{CHARMONIZER_EXE_PATH}...\n"

  # Prepare arguments to charmonizer.
  command = [
    CHARMONIZER_EXE_PATH,
    '--cc=' + cc_command,
    '--enable-c',
    '--enable-ruby',
    '--host=ruby',
    '--enable-makefile',
    '--',
    all_ccflags,
  ]
  if (ENV['CHARM_VALGRIND'])
    command.unshift("valgrind", "--leak-check=yes")
  end

  # Run charmonizer.
  puts command.join(" ")
  if !system(*command)
    raise "Failed to run #{CHARMONIZER_EXE_PATH}: " + $?.to_s
  end
end
CLEAN.include(CHARMONIZER_EXE_PATH)
CLEAN.include(CHARMONY_H_PATH)
CLEAN.include(CHARMONY_RB_PATH)
# Clean up after charmonizer if it doesn't succeed on its own.
CLEAN.include("_charm*")

desc "Build Clownfish"
task :static => [:configure] do
  command = ['make', '-j', 'static']
  puts command.join(" ")
  if !system(*command)
    raise "Failed to build C static lib" + $?.to_s
  end
  #Rake::Task['cfc_ext'].invoke
end

desc "Build CFC Extension"
task :cfc_ext => [:static] do
  makefile_path = File.join('ext', 'Clownfish', 'Makefile')
  Dir.chdir(RUBY_EXT_CFC) do
    ruby 'extconf.rb'
  end
  Dir.chdir(RUBY_EXT_CFC) do
    if system('make').nil?
      abort "Failed to make cfc ruby extension"
    end
  end
end

# Clean up Ruby extension.
Dir.glob(File.join('ext', '**', '*.' + rbconfig['OBJEXT'])).each do |file|
  CLEAN.include(file);
end
Dir.glob(File.join('ext', '**', '*.' + rbconfig['DLEXT'])).each do |file|
  CLEAN.include(file);
end
CLEAN.include(File.join('ext', 'Clownfish', 'Makefile'))

task :default => [:cfc_ext]

task :clean => [] do
  if File.exist?('Makefile')
    command = ['make', 'distclean']
    if system(*command).nil?
      raise "make distclean failed: " + $?.to_s
    end
  end
end

def includes
  return "-I#{CFC_INCLUDE_DIR} -I#{CFC_SRC_DIR} -I#{CFC_RUBY_DIR}"
end
